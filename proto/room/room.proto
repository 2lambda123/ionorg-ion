syntax = "proto3";

option go_package = "github.com/pion/ion/proto/room";

package room;

service Room {
  rpc Join(JoinRequest) returns (JoinReply) {}

  rpc Leave(LeaveRequest) returns (LeaveReply) {}

  rpc GetParticipants(Empty) returns (GetParticipantsReply) {}

  rpc ReceiveNotification(Empty) returns (stream Notification) {}

  // /* Requires: role = Host

  rpc SetImportance(SetImportanceRequest) returns (SetImportanceReply) {}

  rpc LockConference(LockConferenceRequest) returns (LockConferenceReply) {}

  rpc UnlockConference(UnlockConferenceRequest)
      returns (UnlockConferenceReply) {}

  rpc EndConference(EndConferenceRequest) returns (EndConferenceReply) {}

  rpc EditParticipantInfo(EditParticipantInfoRequest)
      returns (EditParticipantInfoReply) {}

  rpc AddParticipant(AddParticipantRequest) returns (AddParticipantReply) {}

  rpc RemoveParticipant(RemoveParticipantRequest)
      returns (RemoveParticipantReply) {}

  rpc SendMessage(SendMessageRequest) returns (SendMessageReply) {}

  // */
}

message JoinRequest {
  string uid = 1;
  string displayName = 2;
  bytes extraInfo = 3;
  Role role = 4;
  string avatar = 5;
  string vendor = 6;
  string token = 7;
}

message JoinReply {
  bool success = 1;
  Configuration config = 2;
  Error error = 3;
}

enum Role {
  RoleHost = 0;
  RoleGuest = 1;
}

enum Protocol {
  ProtocolUnknown = 0;
  ProtocolWebRTC = 1;
  ProtocolSIP = 2;
  ProtocolRTMP = 3;
}

message Participant {
  string uid = 1;
  string displayName = 2;
  bytes extraInfo = 3;
  Role role = 4;
  Protocol protocol = 5;
  string avatar = 6;
  string callDirection = 7; // 'in' or 'out'
  string vendor = 8;        // device info
}

enum ParticipantStatus {
  Create = 0;
  Update = 1;
  Delete = 2;
}

message ParticipantEvent {
  Participant participant = 1;
  ParticipantStatus status = 2;
}

message ParticipantsReply {
  Participant participants = 1;
  Permission permission = 2;
}

message GetParticipantsReply { repeated ParticipantsReply participants = 1; }

message Error {
  int32 code = 1;
  string reason = 2;
}

enum StreamType {
  UserMedia = 0;
  Presentation = 1;
  Streaming = 2;
}

message Configuration {
  string uuid = 1; // unique id for the room.
  boolean isAudioOnlyMode = 2;
  Role role = 3;
  Permission yourPermission = 4;
}

message Permission {
  boolean addParticipants = 1;
  boolean removeParticipants = 2;

  boolean blockOthersAudio = 3;
  boolean blockOthersVideo = 4;

  boolean endConference = 7;
  boolean lockConference = 8;

  boolean publish = 9;
  boolean subscribe = 10;

  boolean setImportance = 11;
}

message SendMessageRequest { Message message = 1; }

message Message {
  string origin = 1; // Name of the sending participant.
  string uid = 3;    // UUID of the sending participant.
  string type = 4;   // MIME content-type of the message, usually text/plain.
  bytes payload = 5; // Payload message contents.
}

message Disconnect { string reason = 1; }

message Notification {
  oneof payload {
    ParticipantEvent participant = 1;
    Message message = 2;
    Disconnect disconnect = 3;
    Error error = 4;
  }
}

message AddParticipantRequest {
  Role role = 1;
  String description = 2;
  Protocol protocol = 3;
  String source_display_name = 4;
}

message AddParticipantReply {
  bool success = 1;
  Error error = 2;
  Participant description = 3;
}

message SetImportanceRequest { repeated Participant participants = 1; }