// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package islb

import (
	context "context"
	ion "github.com/pion/ion/pkg/grpc/ion"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ISLBClient is the client API for ISLB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ISLBClient interface {
	FindNode(ctx context.Context, in *FindNodeRequest, opts ...grpc.CallOption) (*FindNodeReply, error)
	PostEvent(ctx context.Context, in *ISLBEvent, opts ...grpc.CallOption) (*ion.Empty, error)
	HandleEvent(ctx context.Context, in *ion.Empty, opts ...grpc.CallOption) (ISLB_HandleEventClient, error)
}

type iSLBClient struct {
	cc grpc.ClientConnInterface
}

func NewISLBClient(cc grpc.ClientConnInterface) ISLBClient {
	return &iSLBClient{cc}
}

func (c *iSLBClient) FindNode(ctx context.Context, in *FindNodeRequest, opts ...grpc.CallOption) (*FindNodeReply, error) {
	out := new(FindNodeReply)
	err := c.cc.Invoke(ctx, "/islb.ISLB/FindNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iSLBClient) PostEvent(ctx context.Context, in *ISLBEvent, opts ...grpc.CallOption) (*ion.Empty, error) {
	out := new(ion.Empty)
	err := c.cc.Invoke(ctx, "/islb.ISLB/PostEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iSLBClient) HandleEvent(ctx context.Context, in *ion.Empty, opts ...grpc.CallOption) (ISLB_HandleEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &ISLB_ServiceDesc.Streams[0], "/islb.ISLB/HandleEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &iSLBHandleEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ISLB_HandleEventClient interface {
	Recv() (*ISLBEvent, error)
	grpc.ClientStream
}

type iSLBHandleEventClient struct {
	grpc.ClientStream
}

func (x *iSLBHandleEventClient) Recv() (*ISLBEvent, error) {
	m := new(ISLBEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ISLBServer is the server API for ISLB service.
// All implementations must embed UnimplementedISLBServer
// for forward compatibility
type ISLBServer interface {
	FindNode(context.Context, *FindNodeRequest) (*FindNodeReply, error)
	PostEvent(context.Context, *ISLBEvent) (*ion.Empty, error)
	HandleEvent(*ion.Empty, ISLB_HandleEventServer) error
	mustEmbedUnimplementedISLBServer()
}

// UnimplementedISLBServer must be embedded to have forward compatible implementations.
type UnimplementedISLBServer struct {
}

func (UnimplementedISLBServer) FindNode(context.Context, *FindNodeRequest) (*FindNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNode not implemented")
}
func (UnimplementedISLBServer) PostEvent(context.Context, *ISLBEvent) (*ion.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEvent not implemented")
}
func (UnimplementedISLBServer) HandleEvent(*ion.Empty, ISLB_HandleEventServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleEvent not implemented")
}
func (UnimplementedISLBServer) mustEmbedUnimplementedISLBServer() {}

// UnsafeISLBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ISLBServer will
// result in compilation errors.
type UnsafeISLBServer interface {
	mustEmbedUnimplementedISLBServer()
}

func RegisterISLBServer(s grpc.ServiceRegistrar, srv ISLBServer) {
	s.RegisterService(&ISLB_ServiceDesc, srv)
}

func _ISLB_FindNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ISLBServer).FindNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/islb.ISLB/FindNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ISLBServer).FindNode(ctx, req.(*FindNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ISLB_PostEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ISLBEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ISLBServer).PostEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/islb.ISLB/PostEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ISLBServer).PostEvent(ctx, req.(*ISLBEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ISLB_HandleEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ion.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ISLBServer).HandleEvent(m, &iSLBHandleEventServer{stream})
}

type ISLB_HandleEventServer interface {
	Send(*ISLBEvent) error
	grpc.ServerStream
}

type iSLBHandleEventServer struct {
	grpc.ServerStream
}

func (x *iSLBHandleEventServer) Send(m *ISLBEvent) error {
	return x.ServerStream.SendMsg(m)
}

// ISLB_ServiceDesc is the grpc.ServiceDesc for ISLB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ISLB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "islb.ISLB",
	HandlerType: (*ISLBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindNode",
			Handler:    _ISLB_FindNode_Handler,
		},
		{
			MethodName: "PostEvent",
			Handler:    _ISLB_PostEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleEvent",
			Handler:       _ISLB_HandleEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/islb.proto",
}
