// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomClient is the client API for Room service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomClient interface {
	// Manager API
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomReply, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomReply, error)
	AddParticipant(ctx context.Context, in *AddParticipantRequest, opts ...grpc.CallOption) (*AddParticipantReply, error)
	RemoveParticipant(ctx context.Context, in *RemoveParticipantRequest, opts ...grpc.CallOption) (*RemoveParticipantReply, error)
	GetParticipants(ctx context.Context, in *GetParticipantsRequest, opts ...grpc.CallOption) (*GetParticipantsReply, error)
	LockConference(ctx context.Context, in *LockConferenceRequest, opts ...grpc.CallOption) (*LockConferenceReply, error)
	EndConference(ctx context.Context, in *EndConferenceRequest, opts ...grpc.CallOption) (*EndConferenceReply, error)
	SetImportance(ctx context.Context, in *SetImportanceRequest, opts ...grpc.CallOption) (*SetImportanceReply, error)
	EditParticipantInfo(ctx context.Context, in *EditParticipantInfoRequest, opts ...grpc.CallOption) (*EditParticipantInfoReply, error)
	// Conference API
	Signal(ctx context.Context, opts ...grpc.CallOption) (Room_SignalClient, error)
}

type roomClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomClient(cc grpc.ClientConnInterface) RoomClient {
	return &roomClient{cc}
}

func (c *roomClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomReply, error) {
	out := new(CreateRoomReply)
	err := c.cc.Invoke(ctx, "/room.Room/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomReply, error) {
	out := new(DeleteRoomReply)
	err := c.cc.Invoke(ctx, "/room.Room/DeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) AddParticipant(ctx context.Context, in *AddParticipantRequest, opts ...grpc.CallOption) (*AddParticipantReply, error) {
	out := new(AddParticipantReply)
	err := c.cc.Invoke(ctx, "/room.Room/AddParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) RemoveParticipant(ctx context.Context, in *RemoveParticipantRequest, opts ...grpc.CallOption) (*RemoveParticipantReply, error) {
	out := new(RemoveParticipantReply)
	err := c.cc.Invoke(ctx, "/room.Room/RemoveParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) GetParticipants(ctx context.Context, in *GetParticipantsRequest, opts ...grpc.CallOption) (*GetParticipantsReply, error) {
	out := new(GetParticipantsReply)
	err := c.cc.Invoke(ctx, "/room.Room/GetParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) LockConference(ctx context.Context, in *LockConferenceRequest, opts ...grpc.CallOption) (*LockConferenceReply, error) {
	out := new(LockConferenceReply)
	err := c.cc.Invoke(ctx, "/room.Room/LockConference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) EndConference(ctx context.Context, in *EndConferenceRequest, opts ...grpc.CallOption) (*EndConferenceReply, error) {
	out := new(EndConferenceReply)
	err := c.cc.Invoke(ctx, "/room.Room/EndConference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) SetImportance(ctx context.Context, in *SetImportanceRequest, opts ...grpc.CallOption) (*SetImportanceReply, error) {
	out := new(SetImportanceReply)
	err := c.cc.Invoke(ctx, "/room.Room/SetImportance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) EditParticipantInfo(ctx context.Context, in *EditParticipantInfoRequest, opts ...grpc.CallOption) (*EditParticipantInfoReply, error) {
	out := new(EditParticipantInfoReply)
	err := c.cc.Invoke(ctx, "/room.Room/EditParticipantInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) Signal(ctx context.Context, opts ...grpc.CallOption) (Room_SignalClient, error) {
	stream, err := c.cc.NewStream(ctx, &Room_ServiceDesc.Streams[0], "/room.Room/Signal", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomSignalClient{stream}
	return x, nil
}

type Room_SignalClient interface {
	Send(*Request) error
	Recv() (*Reply, error)
	grpc.ClientStream
}

type roomSignalClient struct {
	grpc.ClientStream
}

func (x *roomSignalClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roomSignalClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomServer is the server API for Room service.
// All implementations must embed UnimplementedRoomServer
// for forward compatibility
type RoomServer interface {
	// Manager API
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomReply, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomReply, error)
	AddParticipant(context.Context, *AddParticipantRequest) (*AddParticipantReply, error)
	RemoveParticipant(context.Context, *RemoveParticipantRequest) (*RemoveParticipantReply, error)
	GetParticipants(context.Context, *GetParticipantsRequest) (*GetParticipantsReply, error)
	LockConference(context.Context, *LockConferenceRequest) (*LockConferenceReply, error)
	EndConference(context.Context, *EndConferenceRequest) (*EndConferenceReply, error)
	SetImportance(context.Context, *SetImportanceRequest) (*SetImportanceReply, error)
	EditParticipantInfo(context.Context, *EditParticipantInfoRequest) (*EditParticipantInfoReply, error)
	// Conference API
	Signal(Room_SignalServer) error
	mustEmbedUnimplementedRoomServer()
}

// UnimplementedRoomServer must be embedded to have forward compatible implementations.
type UnimplementedRoomServer struct {
}

func (UnimplementedRoomServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedRoomServer) AddParticipant(context.Context, *AddParticipantRequest) (*AddParticipantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParticipant not implemented")
}
func (UnimplementedRoomServer) RemoveParticipant(context.Context, *RemoveParticipantRequest) (*RemoveParticipantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveParticipant not implemented")
}
func (UnimplementedRoomServer) GetParticipants(context.Context, *GetParticipantsRequest) (*GetParticipantsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipants not implemented")
}
func (UnimplementedRoomServer) LockConference(context.Context, *LockConferenceRequest) (*LockConferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockConference not implemented")
}
func (UnimplementedRoomServer) EndConference(context.Context, *EndConferenceRequest) (*EndConferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndConference not implemented")
}
func (UnimplementedRoomServer) SetImportance(context.Context, *SetImportanceRequest) (*SetImportanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetImportance not implemented")
}
func (UnimplementedRoomServer) EditParticipantInfo(context.Context, *EditParticipantInfoRequest) (*EditParticipantInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditParticipantInfo not implemented")
}
func (UnimplementedRoomServer) Signal(Room_SignalServer) error {
	return status.Errorf(codes.Unimplemented, "method Signal not implemented")
}
func (UnimplementedRoomServer) mustEmbedUnimplementedRoomServer() {}

// UnsafeRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServer will
// result in compilation errors.
type UnsafeRoomServer interface {
	mustEmbedUnimplementedRoomServer()
}

func RegisterRoomServer(s grpc.ServiceRegistrar, srv RoomServer) {
	s.RegisterService(&Room_ServiceDesc, srv)
}

func _Room_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.Room/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.Room/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_AddParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).AddParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.Room/AddParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).AddParticipant(ctx, req.(*AddParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_RemoveParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).RemoveParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.Room/RemoveParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).RemoveParticipant(ctx, req.(*RemoveParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_GetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).GetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.Room/GetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).GetParticipants(ctx, req.(*GetParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_LockConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).LockConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.Room/LockConference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).LockConference(ctx, req.(*LockConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_EndConference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndConferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).EndConference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.Room/EndConference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).EndConference(ctx, req.(*EndConferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_SetImportance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetImportanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).SetImportance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.Room/SetImportance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).SetImportance(ctx, req.(*SetImportanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_EditParticipantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditParticipantInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).EditParticipantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/room.Room/EditParticipantInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).EditParticipantInfo(ctx, req.(*EditParticipantInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_Signal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoomServer).Signal(&roomSignalServer{stream})
}

type Room_SignalServer interface {
	Send(*Reply) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type roomSignalServer struct {
	grpc.ServerStream
}

func (x *roomSignalServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roomSignalServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Room_ServiceDesc is the grpc.ServiceDesc for Room service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Room_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "room.Room",
	HandlerType: (*RoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _Room_CreateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _Room_DeleteRoom_Handler,
		},
		{
			MethodName: "AddParticipant",
			Handler:    _Room_AddParticipant_Handler,
		},
		{
			MethodName: "RemoveParticipant",
			Handler:    _Room_RemoveParticipant_Handler,
		},
		{
			MethodName: "GetParticipants",
			Handler:    _Room_GetParticipants_Handler,
		},
		{
			MethodName: "LockConference",
			Handler:    _Room_LockConference_Handler,
		},
		{
			MethodName: "EndConference",
			Handler:    _Room_EndConference_Handler,
		},
		{
			MethodName: "SetImportance",
			Handler:    _Room_SetImportance_Handler,
		},
		{
			MethodName: "EditParticipantInfo",
			Handler:    _Room_EditParticipantInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Signal",
			Handler:       _Room_Signal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "apps/room/proto/room.proto",
}
