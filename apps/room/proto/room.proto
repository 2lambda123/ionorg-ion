syntax = "proto3";

option go_package = "github.com/pion/ion/apps/room/proto";

package room;

service RoomService {
  // Manager API
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomReply) {}
  rpc DeleteRoom(DeleteRoomRequest) returns (DeleteRoomReply) {}
  rpc AddParticipant(AddParticipantRequest) returns (AddParticipantReply) {}
  rpc RemoveParticipant(RemoveParticipantRequest)
      returns (RemoveParticipantReply) {}
  rpc GetParticipants(GetParticipantsRequest) returns (GetParticipantsReply) {}
  rpc LockConference(LockConferenceRequest) returns (LockConferenceReply) {}
  rpc EndConference(EndConferenceRequest) returns (EndConferenceReply) {}
  rpc SetImportance(SetImportanceRequest) returns (SetImportanceReply) {}
  rpc EditParticipantInfo(EditParticipantInfoRequest)
      returns (EditParticipantInfoReply) {}
}

service RoomSignal {
  // Signal
  rpc Signal(stream Request) returns (stream Reply) {}
}

enum ErrorType {
  PermissionDenied = 0;
  ServiceUnavailable = 1;
  RoomLocked = 2;
  PasswordRequired = 3;
  RoomNotExist = 4;
  UnkownError = 5;
}

message Error {
  ErrorType code = 1;
  string reason = 2;
}

message Request {
  oneof payload {
    JoinRequest join = 1;
    LeaveRequest leave = 2;
    SendMessageRequest sendMessage = 3;
    MediaPresentationRequest mediaPresentation = 4;
  }
}

message Reply {
  oneof payload {
    JoinReply join = 1;
    LeaveReply leave = 2;
    SendMessageReply sendMessage = 3;
    MediaPresentationReply mediaPresentation = 4;
    ParticipantEvent participant = 5;
    MediaPresentation presentation = 6;
    Message message = 7;
    Disconnect disconnect = 8;
  }
}

message CreateRoomRequest {
  string name = 1;
  string sid = 2;
  string password = 3;
  string description = 4;
}

message CreateRoomReply {
  bool success = 1;
  Error error = 2;
}

message DeleteRoomRequest {
  string sid = 1;
}

message DeleteRoomReply {
  bool success = 1;
  Error error = 2;
}

message JoinRequest {
  string sid = 1;
  string uid = 2;
  string displayName = 3;
  bytes extraInfo = 4;
  Role role = 5;
  string avatar = 6;
  string vendor = 7;
  string password = 8;
}

message Permission {
  bool publish = 1;
  bool subscribe = 2;
  bool addParticipants = 3;
  bool removeParticipants = 4;
  bool endConference = 5;
  bool lockConference = 6;
  bool setImportance = 7;
}

message RoomInfo {
  string sid = 1;
  string name = 2;
}

message JoinReply {
  bool success = 1;
  Error error = 2;
  Role role = 3;
  RoomInfo roomInfo = 4;
  Permission permission = 5;
  bool isAudioOnlyMode = 6;
}

message LeaveRequest {
  string sid = 1;
  string uid = 2;
}

message LeaveReply {
  bool success = 1;
  Error error = 2;
}

enum Role {
  Host = 0;
  Guest = 1;
}

enum Protocol {
  ProtocolWebRTC = 0;
  ProtocolSIP = 1;
  ProtocolRTMP = 2;
  ProtocolRTSP = 3;
}

enum MediaType {
  UserMedia = 0;
  ScreenCapture = 1;
  Cavans = 2;
  Streaming = 3;
  Voip = 4;
}

message TrackInfo {
  string id = 1;
  string stream_id = 2;
  MediaType type = 3;
}

message MediaPresentation {
  string sid = 1;
  string uid = 2;
  repeated TrackInfo tracks = 3;
}

message MediaPresentationRequest { MediaPresentation request = 1; }

message MediaPresentationReply {
  bool success = 1;
  Error error = 2;
}

message Participant {
  string uid = 1;
  string displayName = 2;
  bytes extraInfo = 3;
  Role role = 4;
  Protocol protocol = 5;
  string avatar = 6;
  string callDirection = 7;
  string vendor = 8;
  repeated TrackInfo tracks = 9;
}

message GetParticipantsRequest { string sid = 1; }

message GetParticipantsReply { repeated Participant participants = 1; }

message Message {
  string from = 1;   // UUID of the sending participant.
  string to = 2;     // UUID of the receiving participant.
  string type = 3;   // MIME content-type of the message, usually text/plain.
  bytes payload = 4; // Payload message contents.
}

message SendMessageRequest {
  string sid = 1;
  Message message = 2;
}

message SendMessageReply {
  bool success = 1;
  Error error = 2;
}

message Disconnect {
  string sid = 1;
  string reason = 2;
}

enum ParticipantState {
  JOIN = 0;
  UPDATE = 1;
  LEAVE = 2;
}

message ParticipantEvent {
  Participant participant = 1;
  ParticipantState state = 2;
}

message AddParticipantRequest {
  enum Direction {
    INCOMING = 0;
    OUTGOING = 1;
    BILATERAL = 2;
  }
  string sid = 3;         // session id for conference
  string destination = 4; // rtsp://192.168.1.1:8080/video1,
                          // rtmp://192.168.1.1/video1, sip:100@alice.com
  string sourceDisplayName = 5;
  Role role = 6; // Host, Guest
  Protocol protocol =
      7; // ProtocolWebRTC, ProtocolSIP, ProtocolRTMP, ProtocolRTSP
  Direction direction = 8;
}

message AddParticipantReply {
  bool success = 1;
  Error error = 2;
  Participant participant = 3;
}

message SetImportanceRequest {
  string sid = 1;
  repeated string uids = 2;
}
message SetImportanceReply {
  bool success = 1;
  Error error = 2;
}

message LockConferenceRequest {
  string sid = 1;
  bool lock = 2;
  string password = 3;
}

message LockConferenceReply {
  bool success = 1;
  Error error = 2;
}

message EndConferenceRequest {
  string sid = 1;
  string reason = 2;
}

message EndConferenceReply {
  bool success = 1;
  Error error = 2;
}

message EditParticipantInfoRequest {
  string sid = 1;
  string uid = 2;
  string displayName = 3;
  // Role role = 4;
}

message EditParticipantInfoReply {
  bool success = 1;
  Error error = 2;
}

message RemoveParticipantRequest {
  string sid = 1;
  string uid = 2;
}

message RemoveParticipantReply {
  bool success = 1;
  Error error = 2;
}
